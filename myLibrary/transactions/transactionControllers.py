from flask import make_response, request, jsonify
from bson.json_util import dumps
import json
from datetime import datetime
from myLibrary.transactions import transaction
from myLibrary import mongo


# Updating the transaction when book issued and returned
@transaction.route("", methods=["POST", "PATCH"])
def issue_book():
    if request.method == "POST":
        data = request.get_json()
        data["issue_date"] = datetime.strptime((data["issue_date"]), "%d-%m-%Y")
        print(data)
        if mongo.db.books.find_one({"name": data["name"]}):
            if not mongo.db.transactions.find_one({"$and": [{"name": data["name"]}, {"person": data["person"]},
                                                            {"return_date": {"$exists": True}}]}):

                transaction = mongo.db.transactions.insert_one(data)
                response = make_response(jsonify({"message": "Transaction Added"}), 201)
                return response

            else:
                response = make_response(jsonify({"message": "Book Already issued to the Person"}), 200)
                return response

        else:
            response = make_response(jsonify({"message": "Book Not Found"}), 404)
            return response

    if request.method == "PATCH":
        data = request.get_json()
        data["return_date"] = datetime.strptime((data["return_date"]), "%d-%m-%Y")

        transaction = mongo.db.transactions.find_one({"$and": [{"name": data["name"]}, {"person": data["person"]}]})
        if transaction:
            print(transaction)
            temp = mongo.db.books.find_one({"name": data["name"]})
            rent = temp["rent_per_day"]
            days = data["return_date"] - transaction["issue_date"]

            rent_generated = int(rent) * int(days.days)

            mongo.db.transactions.find_one_and_update({"$and": [{"name": data["name"]}, {"person": data["person"]}]},
                                                      {'$set': {"return_date": data["return_date"],
                                                                "rent_generated": rent_generated}})

            response = make_response(jsonify({"message": "Transaction Updated"}), 202)
            return response
        else:
            response = make_response(jsonify({"message": "Transaction not found"}), 404)
            return response

    else:
        response = make_response(jsonify({"message": "Method not allowed"}), 405)
        return response


# List of people who have issued that book ( total count) + list of people who currently have that book issued (
# currently issued only).
@transaction.route("/search/<string:name>", methods=["GET"])
def get_transaction_by_book(name):
    regex = "^" + name
    count = mongo.db.transactions.aggregate([
        {"$match":
             {"name": {"$regex": regex, '$options': 'i'}}},
        {"$count": "totalCount"}
    ])

    issue_list = mongo.db.transactions.find({"$and": [{"name": {"$regex": regex, '$options': 'i'}},{"return_date": {"$exists": False}}]})

    response = make_response(jsonify({"Total Issues": list(count)[0]["totalCount"]},
                                     {"Currently Issued": json.loads(dumps(issue_list))}), 200)
    return response


# Total rent generated by that book.
@transaction.route("/rent/<string:name>", methods=["GET"])
def get_rent_generated_by_book(name):
    regex = "^" + name
    transaction = mongo.db.transactions.find({"$and": [{"name": {"$regex": regex, '$options': 'i'}}, {"return_date": {"$exists": True}}]})

    sum = 0
    for i in transaction:
        print(i["rent_generated"])
        sum += int(i["rent_generated"])

    response = make_response(jsonify({"Total Rent Generated": sum}), 200)
    return response


# List of books issued to that person
@transaction.route("/person/<string:name>", methods=["GET"])
def get_book_by_person(name):
    regex = "^"+name
    transaction = mongo.db.transactions.find({"person": {"$regex": regex, '$options': 'i'}})
    transaction = dumps(transaction)

    if len(transaction)>0:
        response = make_response(jsonify({"Transactions": json.loads(transaction)}), 200)
        return response

    else:
        response = make_response(jsonify({"message": "No Transactions Found"}), 200)
        return response

    return make_response(jsonify({"message": "Something went wrong"}), 401)


# list of books issued in that date range and the person they are issued to
@transaction.route("", methods=["GET"])
def get_book_by_date_range():
    start = datetime.strptime((request.args["start"]), "%d-%m-%Y")
    end = datetime.strptime((request.args["end"]), "%d-%m-%Y")
    transactions = mongo.db.transactions.find({"issue_date": {"$gte": start, "$lte": end}})

    transactions = dumps(transactions)
    if len(transactions) > 0:
        response = make_response(jsonify({"Transactions": json.loads(transactions)}), 200)
        return response
    else:
        response = make_response(jsonify({"message": "No Transactions Found"}), 200)
        return response
    return make_response(jsonify({"message": "Something went wrong"}), 401)
